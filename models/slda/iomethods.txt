/*
 * load the model in the binary format
 *ED
 */

void slda::save_model_text(const char * filename, int t)
{

    FILE * file = NULL;
    file = fopen(filename, "rb");
    //fwrite(&epsilon, sizeof (double), 1, file);
    //fwrite(&num_topics[t], sizeof (int), 1, file);
    //fwrite(&size_vocab[t], sizeof (int), 1, file);

    fread(&num_classes, sizeof (int), 1, file);
    fread(&num_word_types, sizeof (int), 1, file);

    int * num_topics = new int[num_word_types];
    int * size_vocab = new int[num_word_types];

    // double *** log_prob_w =  new double ** [num_word_types];
    alphas *** as =  new alphas ** [num_word_types];
    alphas ** as_global =  new alphas * [num_word_types];

    for (int t = 0; t < num_word_types; t++)
    {
        fread(&epsilon, sizeof (double), 1, file);
        fread(&num_topics[t], sizeof (int), 1, file);
        fread(&size_vocab[t], sizeof (int), 1, file);

        for (int k = 0; k < num_topics[t]; k++)
        {
            // fread(log_prob_w[t][k], sizeof(double), size_vocab[t], file);
        }
       
    }

    fflush(file);
    fclose(file);

    FILE * file = NULL;
    file = fopen(filename, "w");
    //print elsewhere!!!
    //fprintf(file, "alpha: %lf\n", alpha);
    fprintf(file, "number of word types: %d\n", num_word_types);
    fprintf(file, "number of authors: %d\n", num_classes);

    for (int t  = 0; t < num_word_types; t++)
    {
        fprintf(file, "\n");
        fprintf(file, "word type: %d\n", t);
        fprintf(file, "number of topics: %d\n", num_topics[t]);
        fprintf(file, "size of vocab: %d\n", size_vocab[t]);

        fprintf(file, "vocab distribution: \n"); // in log space
        for (int k = 0; k < num_topics[t]; k++)
        {
            fprintf(file, "vocab for topic %d: ", k); // in log space
            for (int j = 0; j < size_vocab[t]; j ++)
            {
                fprintf(file, "%lf ", log_prob_w[t][k][j]);
            }
            fprintf(file, "\n");
        }

        fprintf(file, "global alphas: ");
        for (int k = 0; k < num_topics[t]; k++)
            fprintf(file, "%lf ", as_global[t]->alpha_t[k]);
        
        fprintf(file, "\n");

        fprintf(file, "per author alphas: \n");
        for (int a = 0; a < num_classes; a++)
        {
            fprintf(file, "author %d ", a);
            for (int k = 0; k < num_topics[t]; k++)
                fprintf(file, "%lf ", as[a][t]->alpha_t[k]);
            fprintf(file, "\n");
        }

        if (num_classes > 1)
        {
            fprintf(file, "etas: \n");
            for (int i = 0; i < num_classes-1; i ++)
            {
                fprintf(file, "author: %i", i);

                for (int j = 0; j < num_topics[t]; j ++)
                {
                    fprintf(file, "%lf ", eta[t][i][j]);
                }
                fprintf(file, "\n");
            }
        }
    }

    fflush(file);
    fclose(file);
}


void slda::load_model(const char * filename)
{
    FILE * file = NULL;
    file = fopen(filename, "rb");
    //fwrite(&epsilon, sizeof (double), 1, file);
    //fwrite(&num_topics[t], sizeof (int), 1, file);
    //fwrite(&size_vocab[t], sizeof (int), 1, file);

    fread(&num_classes, sizeof (int), 1, file);
    fread(&num_word_types, sizeof (int), 1, file);

    int * num_topics = new int[num_word_types];
    int * size_vocab = new int[num_word_types];

    // double *** log_prob_w =  new double ** [num_word_types];
    alphas *** as =  new alphas ** [num_word_types];
    alphas ** as_global =  new alphas * [num_word_types];


    for (int t = 0; t < num_word_types; t++)
    {
        fread(&epsilon, sizeof (double), 1, file);
        fread(&num_topics[t], sizeof (int), 1, file);
        fread(&size_vocab[t], sizeof (int), 1, file);

        for (int k = 0; k < num_topics[t]; k++)
        {
           for (int w = 0; w < size_vocab[t]; w++)
                fread(log_prob_w[t][k][w], sizeof(double),1, file);
        }

        fread(as_global[t]->alpha_t, sizeof(double), num_topics[t], file);
        for (int a = 0; a < num_classes; a++)
        {
            fread(as[t][a]->alpha_t, sizeof(double), num_topics[t], file);
        }
        if (num_classes > 1)
        {
            for (int i = 0; i < num_classes-1; i ++)
            {
                for (int k = 0; k < num_topics[t]; k++)
                    fread(eta[t][i][k], sizeof(double), 1, file);
            }
        }
    }

    fflush(file);
    fclose(file);
}

void slda::save_model(const char * filename)
{
    FILE * file = NULL;
    file = fopen(filename, "wb");
    //fwrite(&epsilon, sizeof (double), 1, file);
    //fwrite(&num_topics[t], sizeof (int), 1, file);
    //fwrite(&size_vocab[t], sizeof (int), 1, file);

    fwrite(&num_classes, sizeof (int), 1, file);
    fwrite(&num_word_types,sizeof (int), 1, file);

    for (int t = 0; t < num_word_types; t++)
    {
        fwrite(&epsilon, sizeof (double), 1, file);
        fwrite(&num_topics[t], sizeof (int), 1, file);
        fwrite(&size_vocab[t], sizeof (int), 1, file);

        for (int k = 0; k < num_topics[t]; k++)
        {
            for (int w = 0; w < size_vocab[t]; w++)
                fwrite(log_prob_w[t][k][w], sizeof(double),1, file);
        }

        fwrite(as_global[t]->alpha_t, sizeof(double), num_topics[t], file);
        for (int a = 0; a < num_classes; a++)
        {
            fwrite(as[t][a]->alpha_t, sizeof(double), num_topics[t], file);
        }
        if (num_classes > 1)
        {
            for (int i = 0; i < num_classes-1; i ++)
            {
                for (int k = 0; k < num_topics[t]; k++)
                    fwrite(eta[t][i][k], sizeof(double), 1, file);
            }
        }
    }

    fflush(file);
    fclose(file);
}